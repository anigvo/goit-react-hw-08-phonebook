{"version":3,"file":"static/js/234.edf42dc7.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactFilter/ContactFilter.styled.jsx","components/ContactFilter/ContactFilter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Li = styled.li`\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  &:last-child {\n    margin-bottom: 0px;\n  }\n`;\n\nconst Button = styled.button`\ncursor: pointer;\n`;\n\nexport { Li, Button };\n","import PropTypes from 'prop-types';\nimport { Li, Button } from './ContactItem.styled';\nimport { selectisDeleting } from 'redux/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useState } from 'react';\n\nexport function ContactItem({ item }) {\n  const isDeleting = useSelector(selectisDeleting);\n  const [id, setID] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    setID(item.id);\n    dispatch(deleteContact(item.id));\n  };\n\n  return (\n    <Li key={item.id}>\n      <span>\n        {item.name}: {item.number}\n      </span>\n      <Button type=\"button\" onClick={handleDelete} disabled={isDeleting}>\n        {item.id === id && isDeleting ? <>Deleting...</> : <>Delete</>}\n      </Button>\n    </Li>\n  );\n}\n\nContactItem.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from '@emotion/styled';\n\nconst Ul = styled.ul`\n  padding: 0px;\n  text-align: left;\n  list-style: none;\n  margin: 0px;\n  margin-top: 20px;\n`;\n\nexport { Ul };\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { Ul } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/selectors';\n\nexport function ContactList() {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <Ul>\n      {filteredContacts.map(item => (\n        <ContactItem\n          item={item}\n          key={item.id}\n        />\n      ))}\n    </Ul>\n  );\n}\n","import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  border: 1px solid black;\n  border-radius: 5px;\n  padding: 20px;\n`;\n\nconst Label = styled.label`\n  margin-bottom: 20px;\n`;\n\nconst Input = styled.input`\nmargin-left: 20px`;\n\nconst AddContactButton = styled.button`\ncursor: pointer;`;\n\nexport { Form, Label, Input, AddContactButton };\n","import { Form, Label, Input, AddContactButton } from './ContactForm.styled';\nimport { useState } from 'react';\nimport { selectIsAdding } from 'redux/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const isAdding = useSelector(selectIsAdding);\n  const contacts = useSelector(selectContacts);\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    handleAddContact(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  const handleAddContact = (contactName, contactNumber) => {\n    const newContact = {\n      name: contactName,\n      number: contactNumber,\n    };\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === contactName.toLowerCase()\n      )\n    ) {\n      alert(`${contactName} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact(newContact));\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[A-Za-z\\u0080-\\uFFFF ']+$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleInputChange}\n          value={name}\n        />\n      </Label>\n\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"^(\\+?[0-9.\\(\\)\\-\\s]*)$\"\n          title=\"number number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleInputChange}\n          value={number}\n        />\n      </Label>\n\n      <AddContactButton type=\"submit\" disabled={isAdding}>\n        {isAdding ? <>Adding...</> : <>Add contact</>}\n      </AddContactButton>\n    </Form>\n  );\n}\n","import styled from '@emotion/styled';\n\nconst Label = styled.label`\n  margin-bottom: 20px;\n`;\n\nconst Input = styled.input`\n  margin-left: 20px;\n`;\n\nexport { Label, Input };\n","import { Label, Input } from './ContactFilter.styled';\nimport { selectFilter } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\n\nexport function ContactFilter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const filterInput = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" name=\"filter\" value={filter} onChange={filterInput} />\n    </Label>\n  );\n}\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { H1, H2, Container, Wrapper } from 'components/App.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectisFetching, selectError } from 'redux/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isFetching = useSelector(selectisFetching);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <H1>Phonebook</H1>\n      <ContactForm />\n      <H2>Contacts</H2>\n      <Wrapper>\n        {isFetching && !error ? (\n          <b>Request in progress...</b>\n        ) : (\n          <>\n            <ContactFilter />\n            <ContactList />\n          </>\n        )}\n      </Wrapper>\n    </Container>\n  );\n}\n\nexport default Contacts\n"],"names":["Li","styled","Button","ContactItem","item","isDeleting","useSelector","selectisDeleting","useState","id","setID","dispatch","useDispatch","name","number","type","onClick","deleteContact","disabled","Ul","ContactList","filteredContacts","selectFilteredContacts","map","Form","Label","Input","AddContactButton","ContactForm","setName","setNumber","isAdding","selectIsAdding","contacts","selectContacts","handleInputChange","event","currentTarget","value","handleAddContact","contactName","contactNumber","newContact","find","contact","toLowerCase","alert","addContact","onSubmit","preventDefault","pattern","title","required","onChange","ContactFilter","filter","selectFilter","setFilter","isFetching","selectisFetching","error","selectError","useEffect","fetchContacts","H1","H2"],"sourceRoot":""}